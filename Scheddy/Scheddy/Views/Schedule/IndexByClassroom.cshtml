@model Scheddy.ViewModels.ScheduleClassroomSection

@{
    ViewBag.Title = "Classroom By Time";
    DateTime firstClassTime = DateTime.Parse("12/12/2016 07:30:00 AM");

    string filteredInstructor = "";
}

<h2>Classrooms by Time</h2>

<p>
    @Html.ActionLink("Create New Section", "Create", "Section", new { scheduleType = 1, scheduleId = @Model.scheduleId, startTime = (DateTime?)null, endTime = (DateTime?)null, classroom = "", instructor = "", daysTaught = "" }, null) |
    @Html.ActionLink("Instructor Schedule View", "IndexByProfessor", new { id = Model.scheduleId })
</p>

<table class="table">
    <tr>
        <th>
            @Html.Raw("Classroom")
        </th>
        <th>
            @Html.Raw("7:30")
        </th>
        <th>
            @Html.Raw("8:30")
        </th>
        <th>
            @Html.Raw("9:30")
        </th>
        <th>
            @Html.Raw("10:30")
        </th>
        <th>
            @Html.Raw("11:30")
        </th>
        <th>
            @Html.Raw("12:30")
        </th>
        <th>
            @Html.Raw("1:30")
        </th>
        <th>
            @Html.Raw("2:30")
        </th>
        <th>
            @Html.Raw("3:30")
        </th>
        <th>
            @Html.Raw("4:30")
        </th>
        <th>
            @Html.Raw("5:30")
        </th>
        <th>
            @Html.Raw("6:30")
        </th>
        <th>
            @Html.Raw("7:30")
        </th>

    </tr>

    @try
    {
        foreach (var item in Model.classroom)
        {
            // find out how many different sets of days this classroom is holding
            List<string> uniqueDaysTaught = new List<string>();
            foreach (var stuff in Model.indexByClassroom)
            {
                if (item.Campus == stuff.Campus && item.BldgCode == stuff.BldgCode && item.RoomNumber == stuff.RoomNumber && !uniqueDaysTaught.Contains(stuff.DaysTaught))
                {
                    uniqueDaysTaught.Add(stuff.DaysTaught);
                }
            }

            uniqueDaysTaught.Sort();

            // make a row for each day
            foreach (var days in uniqueDaysTaught)
            {

                <tr>
                    <td>
                        @Html.Raw(@item.Campus + " " + @item.BldgCode.ToString() + " " + @item.RoomNumber.ToString() + " - " + days)
                    </td>

                    @if (days == "ONL")
                    {

                        <td>

                        @foreach (var stuff in Model.indexByClassroom)
                        {
                            if (stuff.DaysTaught == "ONL")
                            {
                                @Html.Raw(stuff.Prefix.ToString() + " " + stuff.CourseNumber.ToString())
                                @Html.Raw("</br>")
                                @Html.Raw(stuff.FirstName.ToString() + " " + stuff.LastName.ToString())
                                //@Html.Raw("</br>")
                                //@stuff.StartTime.Value.ToString("HH:mm - ")
                                //@stuff.EndTime.Value.ToString("HH:mm\n")

                                @Html.Raw("</br>")
                                @Html.ActionLink("Edit", "Edit", "Section", new { id = stuff.SectionId, scheduleType = 1 }, null)
                                @Html.Raw(" | ")
                                @Html.ActionLink("Delete", "Delete", "Section", new { id = stuff.SectionId, scheduleType = 1 }, null)

                            }
                        }

                        </td>

                        <td>
                            @Html.ActionLink("Create Online Section", "Create", "Section", new { scheduleType = 1, scheduleId = @Model.scheduleId, startTime = (DateTime?)null, endTime = (DateTime?)null, classroom = "ONLINE", instructor = "", daysTaught = days }, null)
                        </td>

                    }
                    else
                    {

                        DateTime lastEndTime = firstClassTime;
                        int numOfHourOverlap = -1;

                        for (int i = 0; i < 13; i++)
                        {
                            DateTime newTime = firstClassTime.AddHours(i);
                            bool spotTaken = false;

                            if (numOfHourOverlap > 1)
                            {
                                numOfHourOverlap--;
                                spotTaken = true;
                            }

                            foreach (var stuff in Model.indexByClassroom) {

                                string name = stuff.FirstName + " " + stuff.LastName;

                                if (name == filteredInstructor && stuff.StartTime.Value.TimeOfDay == newTime.TimeOfDay
                                    && days == stuff.DaysTaught)
                                {

                                    DateTime theTime = (DateTime)stuff.StartTime;
                                    int numHours = 0;

                                    while (theTime.TimeOfDay < stuff.EndTime.Value.TimeOfDay)
                                    {
                                        numHours++;
                                        theTime = theTime.AddHours(1);
                                    }



                                    spotTaken = true;
                                    numOfHourOverlap = numHours;
                                }
                            }

                            <td>


                                @if (lastEndTime.TimeOfDay > newTime.TimeOfDay)
                                {
                                    spotTaken = true;
                                    DateTime oneHourAhead = newTime.AddHours(1);
                                    if (oneHourAhead.TimeOfDay > lastEndTime.TimeOfDay)
                                    {
                                        @Html.Raw("----->|")
                                    }
                                    else
                                    {
                                        @Html.Raw("-------")
                                    }

                                }

                                @foreach (var stuff in Model.indexByClassroom)
                                {
                                    if (item.Campus == stuff.Campus && item.BldgCode == stuff.BldgCode && item.RoomNumber == stuff.RoomNumber
                                        && newTime.TimeOfDay == stuff.StartTime.Value.TimeOfDay && stuff.DaysTaught == days)
                                    {
                                        spotTaken = true;
                                        lastEndTime = (DateTime)stuff.EndTime;
                                        @Html.Raw(stuff.Prefix.ToString() + " " + stuff.CourseNumber.ToString())
                                        @Html.Raw("</br>")
                                        @Html.Raw(stuff.FirstName.ToString() + " " + stuff.LastName.ToString())
                                        //@Html.Raw("</br>")
                                        //@stuff.StartTime.Value.ToString("HH:mm - ")
                                        //@stuff.EndTime.Value.ToString("HH:mm\n")

                                        @Html.Raw("</br>")
                                        @Html.ActionLink("Edit", "Edit", "Section", new { id = stuff.SectionId, scheduleType = 1 }, null)
                                        @Html.Raw(" | ")
                                        @Html.ActionLink("Delete", "Delete", "Section", new { id = stuff.SectionId, scheduleType = 1 }, null)

                                        break;
                                    }
                                }


                                @if (!spotTaken)
                                {
                                    DateTime potentialEndTime = newTime.AddMinutes(50);
                                    @Html.ActionLink("Create Section", "Create", "Section", new { scheduleType = 1, scheduleId = @Model.scheduleId, startTime = newTime, endTime = potentialEndTime, classroom = item.Campus + " " + item.BldgCode + " " + item.RoomNumber, instructor = "", daysTaught = days }, null)
                                }

                            </td>

                            }

                        } 

                </tr>


            }

        }

    }
    catch (Exception e) { Console.Write(e); }

</table>

