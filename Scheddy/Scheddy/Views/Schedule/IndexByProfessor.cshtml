@model Scheddy.ViewModels.ScheduleInstructorSection

@{
    ViewBag.Title = "Professor By Time";
    DateTime firstClassTime = DateTime.Parse("12/12/2016 07:30:00 AM");
}

<h2>IndexByProfessor</h2>

<table class="table">
    <tr>
        <th>
            Professor
        </th>
        <th>
            @Html.Raw("7:30")
        </th>
        <th>
            @Html.Raw("8:30")
        </th>
        <th>
            @Html.Raw("9:30")
        </th>
        <th>
            @Html.Raw("10:30")
        </th>
        <th>
            @Html.Raw("11:30")
        </th>
        <th>
            @Html.Raw("12:30")
        </th>
        <th>
            @Html.Raw("1:30")
        </th>
        <th>
            @Html.Raw("2:30")
        </th>
        <th>
            @Html.Raw("3:30")
        </th>
        <th>
            @Html.Raw("4:30")
        </th>
        <th>
            @Html.Raw("5:30")
        </th>
        <th>
            @Html.Raw("6:30")
        </th>
        <th>
            @Html.Raw("7:30")
        </th>

    </tr>

    @try
    {
        foreach (var item in Model.instructor)
        {
            // find out how many different sets of days this instructor is teaching
            List<string> uniqueDaysTaught = new List<string>();
            foreach (var stuff in Model.indexByProfessor)
            {
                if (item.FirstName == stuff.FirstName && item.LastName == stuff.LastName && !uniqueDaysTaught.Contains(stuff.DaysTaught))
                {
                    uniqueDaysTaught.Add(stuff.DaysTaught);
                }
            }

            // make a row for each day
            foreach (var days in uniqueDaysTaught)
            {

                <tr>
                    <td>
                        @Html.Raw(@item.LastName.ToString() + ", " + @item.FirstName.ToString() + " - " + days)
                    </td>

                    @{ 
                        DateTime lastEndTime = firstClassTime;
                    }

                    @for (int i = 0; i < 13; i++)
                    {
                        DateTime newTime = firstClassTime.AddHours(i);
                        bool spotTaken = false;
                        
                        <td>


                            @if (lastEndTime.TimeOfDay > newTime.TimeOfDay)
                            {
                                spotTaken = true;
                                DateTime oneHourAhead = newTime.AddHours(1);
                                if (oneHourAhead.TimeOfDay > lastEndTime.TimeOfDay)
                                {
                                    @Html.Raw("-----|")
                                }
                                else
                                {
                                    @Html.Raw("------")
                                }

                            }
                            
                            @foreach (var stuff in Model.indexByProfessor)
                            {
                                if (item.FirstName == stuff.FirstName && item.LastName == stuff.LastName
                                    && newTime.TimeOfDay == stuff.StartTime.Value.TimeOfDay)
                                {
                                    spotTaken = true;
                                    lastEndTime = (DateTime)stuff.EndTime;
                                    @Html.Raw(stuff.Prefix.ToString() + " " + stuff.CourseNumber.ToString())
                                    @Html.Raw("</br>")
                                    @Html.Raw(stuff.BldgCode.ToString() + " " + stuff.RoomNumber.ToString())
                                    @Html.Raw("</br>")
                                    @stuff.Campus.ToString()
                                    //@Html.Raw("</br>")
                                    //@stuff.StartTime.Value.ToString("HH:mm - ")
                                    //@stuff.EndTime.Value.ToString("HH:mm\n")
                                    @Html.Raw("</br>")
                                    @Html.Raw("Edit")
                                    @Html.Raw("</br>")
                                    @Html.Raw("Delete")

                                    break;
                                }
                            }

                            @if (!spotTaken)
                            {
                                //DateTime potentialEndTime = newTime.AddMinutes(50);
                                //@Html.Raw("Make Section for " + newTime.TimeOfDay.ToString() + " - " + potentialEndTime.TimeOfDay.ToString())
                                //@Html.Raw("Make Section for " + item.FirstName.ToString() + " " + days)
                                @Html.Raw("Empty Here")
                            }

                        </td>
                    }

                </tr>


            }

        }

    }
    catch (Exception e) { Console.Write(e); }

</table>
<div class="col-md-offset-2 col-md-10">
    <input id="btnAddSection" type="button" value="Add Section" class="btn btn-default" onclick="location.href='@Url.Action("Create", "Section")'" />
</div>